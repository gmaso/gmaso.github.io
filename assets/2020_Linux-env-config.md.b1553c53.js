import{o as s,c as n,b as a,a as e}from"./app.a93d455b.js";const t='{"title":"Linux 开发环境配置","description":"","frontmatter":{"title":"Linux 开发环境配置","date":"2020-05-16T10:45:18.000Z","tags":null},"headers":[{"level":2,"title":"安装系统（Ubuntu 或 Debian）","slug":"安装系统（ubuntu-或-debian）"},{"level":2,"title":"配置环境变量和安装必备软件","slug":"配置环境变量和安装必备软件"}],"relativePath":"2020/Linux-env-config.md","lastUpdated":1624871318770}',o={},p=e('<h2 id="安装系统（ubuntu-或-debian）"><a class="header-anchor" href="#安装系统（ubuntu-或-debian）" aria-hidden="true">#</a> 安装系统（Ubuntu 或 Debian）</h2><p>推荐 Ubuntu 18.04 或者 Ubuntu 20.04。</p><h4 id="更新系统"><a class="header-anchor" href="#更新系统" aria-hidden="true">#</a> 更新系统</h4><div class="language-bash"><pre><code><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> dist-upgrade\n</code></pre></div><h2 id="配置环境变量和安装必备软件"><a class="header-anchor" href="#配置环境变量和安装必备软件" aria-hidden="true">#</a> 配置环境变量和安装必备软件</h2>',5),c=e('<h4 id="修改-hosts"><a class="header-anchor" href="#修改-hosts" aria-hidden="true">#</a> 修改 hosts</h4><ol><li>打开 <a href="https://raw.githubusercontent.com/googlehosts/hosts/master/hosts-files/hosts" target="_blank" rel="noopener noreferrer">https://raw.githubusercontent.com/googlehosts/hosts/master/hosts-files/hosts</a> ，并将其中的内容复制到 /etc/hosts 中</li><li>复制以下到 /etc/hosts 中：</li></ol><div class="language-bash"><pre><code><span class="token number">192.30</span>.253.112 github.com\n<span class="token number">192.30</span>.253.118 gist.github.com\n<span class="token number">151.101</span>.112.133 assets-cdn.github.com\n<span class="token number">151.101</span>.184.133 raw.githubusercontent.com\n<span class="token number">151.101</span>.112.133 gist.githubusercontent.com\n<span class="token number">151.101</span>.184.133 cloud.githubusercontent.com\n<span class="token number">151.101</span>.112.133 camo.githubusercontent.com\n</code></pre></div><h4 id="安装-git"><a class="header-anchor" href="#安装-git" aria-hidden="true">#</a> 安装 git</h4><h4 id="安装-zsh-和-oh-my-zsh"><a class="header-anchor" href="#安装-zsh-和-oh-my-zsh" aria-hidden="true">#</a> 安装 zsh 和 oh-my-zsh</h4><div class="language-bash"><pre><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">zsh</span>\n<span class="token function">sh</span> -c <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>&quot;</span>\n</code></pre></div><h5 id="安装zsh相关插件"><a class="header-anchor" href="#安装zsh相关插件" aria-hidden="true">#</a> 安装zsh相关插件</h5><div class="language-bash"><pre><code><span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions\n<span class="token function">git</span> clone https://github.com/lukechilds/zsh-nvm ~/.oh-my-zsh/custom/plugins/zsh-nvm\n<span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting\n<span class="token comment"># 修改 .zshrc 文件，主题修改为 ys，并添加插件</span>\n<span class="token assign-left variable">ZSH_THEME</span><span class="token operator">=</span><span class="token string">&quot;ys&quot;</span>\n<span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>zsh-nvm zsh-autosuggestions zsh-syntax-highlighting <span class="token function">git</span><span class="token punctuation">)</span>\n<span class="token comment"># 添加 zsh-nvm 插件后，如果还没有安装 nvm，会在 source .zshrc 后自动开始安装</span>\n</code></pre></div><h4 id="安装-nvm"><a class="header-anchor" href="#安装-nvm" aria-hidden="true">#</a> 安装 nvm</h4><div class="language-bash"><pre><code>// 如果 <span class="token builtin class-name">source</span> 命令没有自动安装 nvm，则手动安装\n<span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh <span class="token operator">|</span> <span class="token function">bash</span>\nnvm <span class="token function">install</span> <span class="token number">12</span>\n<span class="token function">npm</span> i -g @tarojs/cli webpack webpack-cli gulp\n</code></pre></div><h4 id="配置-openjdk"><a class="header-anchor" href="#配置-openjdk" aria-hidden="true">#</a> 配置 openjdk</h4><ol><li>安装 openjdk <a href="http://openjdk.java.net/install/" target="_blank" rel="noopener noreferrer">JDK 8</a> Debian, Ubuntu, etc. On the command line, type:</li></ol><div class="language-bash"><pre><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-8-jdk\n</code></pre></div><p>The openjdk-8-jre package contains just the Java Runtime Environment. If you want to develop Java programs then please install the openjdk-8-jdk package.</p><ol><li>配置java环境变量</li></ol><div class="language-bash"><pre><code><span class="token function">sudo</span> <span class="token function">vi</span> /etc/profile\n<span class="token comment"># 在末尾添加：</span>\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/lib/jvm/java-8-openjdk-amd64/\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/jre\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$CLASSPATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/lib:<span class="token variable">$JRE_HOME</span>/lib\n<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$JRE_HOME</span>/bin\n\n<span class="token comment"># 保存退出</span>\n<span class="token builtin class-name">source</span> /etc/profile\n\n<span class="token comment"># 查看版本信息</span>\njava -version\n\n</code></pre></div><h4 id="安装-docker"><a class="header-anchor" href="#安装-docker" aria-hidden="true">#</a> 安装 docker</h4><div class="language-bash"><pre><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\\</span>\n    apt-transport-https <span class="token punctuation">\\</span>\n    ca-certificates <span class="token punctuation">\\</span>\n    <span class="token function">curl</span> <span class="token punctuation">\\</span>\n    gnupg-agent <span class="token punctuation">\\</span>\n    software-properties-common\n<span class="token function">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -\n<span class="token function">sudo</span> apt-key fingerprint 0EBFCD88\n<span class="token function">sudo</span> add-apt-repository <span class="token punctuation">\\</span>\n   <span class="token string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> \\\n   stable&quot;</span>\n<span class="token function">sudo</span> <span class="token function">apt-get</span> update\n<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io\n\n<span class="token comment"># 添加 docker 用户组，使用非 root 运行</span>\n<span class="token function">sudo</span> <span class="token function">groupadd</span> docker\n<span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker <span class="token environment constant">$USER</span>\nnewgrp docker\ndocker run hello-world\n\n<span class="token comment"># 开机启动</span>\n<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> docker\n\n<span class="token comment"># 可设置源，加快镜像下载数据。设置后需要重启 docker 服务，以下源只适用于腾讯云</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;OPTIONS=&#39;--registry-mirror=https://mirror.ccs.tencentyun.com&#39;&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/sysconfig/docker\nsystemctl daemon-reload\n<span class="token function">service</span> docker restart\n</code></pre></div><h4 id="安装-docker-compose"><a class="header-anchor" href="#安装-docker-compose" aria-hidden="true">#</a> 安装 docker-compose</h4><div class="language-bash"><pre><code><span class="token function">sudo</span> <span class="token function">curl</span> -L <span class="token string">&quot;https://github.com/docker/compose/releases/download/1.25.4/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span>&quot;</span> <span class="token punctuation">\\</span>\n    -o /usr/local/bin/docker-compose\n\n// 如果下载总是失败，可以直接用第三方下载工具从以下网址下载，完成后复制到 /usr/local/bin/ 中\nhttps://github.com/docker/compose/releases/download/1.25.0/docker-compose-Linux-x64_64\n<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose\n</code></pre></div><h4 id="安装-homebrew"><a class="header-anchor" href="#安装-homebrew" aria-hidden="true">#</a> 安装 homebrew</h4><p>安装可能耗时很久。</p><div class="language-bash"><pre><code>/bin/bash -c <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh<span class="token variable">)</span></span>&quot;</span>\n<span class="token builtin class-name">test</span> -d ~/.linuxbrew <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>~/.linuxbrew/bin/brew shellenv<span class="token variable">)</span></span>\n<span class="token builtin class-name">test</span> -d /home/linuxbrew/.linuxbrew <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>/home/linuxbrew/.linuxbrew/bin/brew shellenv<span class="token variable">)</span></span>\n<span class="token builtin class-name">test</span> -r ~/.bash_profile <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;eval \\<span class="token variable"><span class="token variable">$(</span><span class="token variable">$(</span>brew --prefix<span class="token punctuation">)</span>/bin/brew shellenv<span class="token variable">)</span></span>&quot;</span> <span class="token operator">&gt;&gt;</span>~/.bash_profile\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;eval \\<span class="token variable"><span class="token variable">$(</span><span class="token variable">$(</span>brew --prefix<span class="token punctuation">)</span>/bin/brew shellenv<span class="token variable">)</span></span>&quot;</span> <span class="token operator">&gt;&gt;</span>~/.profile\nbrew update\n</code></pre></div>',23);o.render=function(e,t,o,l,i,r){return s(),n("div",null,[p,a(" more "),c])};export default o;export{t as __pageData};
